@inject ITableService tableService
@inject ICartService cartService
@inject IMenuService menuService
@inject IOrderService orderService
@inject IUserService userService
@inject IJSRuntime JS

@using WebApp.DTOs.Menu
@using WebApp.DTOs.Order

<div class="menu-page">
    <!-- Middle Content: Menu -->
    <div class="menu-content">
        <!-- Greeting -->
        <div class="greeting">
            <h1>Hello, @UserName</h1>
            <p>You're in table <span class="table-number">@TableNumber</span></p>
        </div>

        <!-- Search Bar -->
        <div class="search-bar">
            <input type="text" placeholder="What would you like to eat?" @bind="searchQuery" />
        </div>

        <!-- Categories (Horizontally Scrollable) -->
        <div class="categories">
            <h3>Categories</h3>
            <div class="categories-available">
                <button class="category-btn @(selectedCategory == "All" ? "active" : "")" @onclick="@(() => SelectCategory("All"))">
                    All
                </button>
                @foreach (var category in Categories)
                {
                    <button class="category-btn @(selectedCategory == category.Name ? "active" : "")" @onclick="() => SelectCategory(category.Name)">
                        @category.Name
                    </button>
                }
            </div>
        </div>

        <!-- Menu Items (Vertically Scrollable) -->
        <div class="menu-items">
            @if (FilteredMenuItems().Any())
            {
                @foreach (var item in FilteredMenuItems())
                {
                    <div class="menu-item">
                        <div class="menu-image">
                            <img src="@item.ImageUrl" alt="@item.Name" />
                        </div>
                        
                        <div class="menu-details">
                            <h3>@item.Name</h3>
                            <p>@item.Description</p>
                            <p class="price">$@item.Price</p>
                            <button class="add-to-cart-btn" @onclick="() => AddToCart(item)">Add to Cart</button>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>No items found</p>
            }
        </div>

        <!-- Cart Summary (Bottom of Menu) -->
        <div class="cart-summary">
            <div class="cart-summary-details">
                <p>
                    @cartService.GetItemCount() Items.
                    <button @onclick="OpenCart" class="cart-summary__view-cart-btn">View Cart</button>
                </p>
                <h3>Cart Total: $@cartService.GetTotalPrice()</h3>
            </div>

            <button class="place-order-btn" @onclick="PlaceOrder">Place Order</button>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">@errorMessage</div>
        }
    </div>

    <!-- Right Sidebar: Order Summary -->   
    <div class="order-summary">
        <div class="order-summary-content">
            <h3>My Orders</h3>
            <p>Order #1552</p>
        </div>

        <!-- Scrollable Orders List -->
        <div class="orders-list-container">
            <div class="orders-list">
                @foreach (var order in OrdersBySummaryId)
                {
                    <div class="order-item">
                        <div class="order-details">
                            <h4>@order.MenuItemName</h4>
                            <p>Quantity: @order.Quantity</p>
                            <p>Total: $@order.TotalPrice</p>
                            <p>Order Status :@order.OrderStatus</p>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Make Payment Button Fixed at the Bottom -->
        <button class="make-payment-btn" @onclick="NavigateToPayments">Make Payment</button>
    </div>

    <!-- Cart Modal -->
    <Cart IsVisible="isCartVisible" OnClose="CloseCart" />
</div>

@code {
    [Parameter] public List<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>(); // Passed from parent
    [Parameter] public List<MenuItemResponseDTO> MenuItems { get; set; } = new List<MenuItemResponseDTO>(); // Passed from parent
    [Parameter] public List<CreateOrderItemDTO> Orders { get; set; } = new List<CreateOrderItemDTO>(); 
    [Parameter] public List<OrderItemResponseDTO> OrdersBySummaryId { get; set; } = new List<OrderItemResponseDTO>();
    // Passed from parent
    [Parameter] public string TableNumber { get; set; } // Passed from parent
    [Parameter] public string UserName { get; set; } // Passed from parent
    [Parameter] public EventCallback<CreateOrderRequestDTO> OnPlaceOrder { get; set; } // New callback for order placement
    [Parameter] public Guid? OrderSummaryId { get; set; }
    private string searchQuery = "";
    private string selectedCategory = "All"; // Default is All
    private string errorMessage = "";
    private bool isCartVisible = false;

    // protected override async Task OnInitializedAsync()
    // {
    // Fetch existing orders from local storage
    //  Orders = await orderService.GetOrdersFromLocalStorage();
    //  }

    protected override async Task OnInitializedAsync()
    {
        OrderSummaryId = await orderService.GetOrderSummaryIdFromLocalStorage();
        if (OrderSummaryId != null) // Ensure it's a valid ID
        {
            await FetchOrderSummary();
        }
    }

    private async Task FetchOrderSummary()
    {
        try
        {

            var orderSummary = await orderService.GetOrderSummaryByIdAsync(OrderSummaryId);
            if (orderSummary.Success && orderSummary.Data != null && orderSummary.Data.OrderItems.Count != 0)
            {
                OrdersBySummaryId = orderSummary.Data.OrderItems;
            }
           // SubTotalAmount = orderSummary.SubTotalAmount;
               // TaxAmount = orderSummary.TaxAmount;
               // TotalAmount = orderSummary.TotalAmount;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load order summary";
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("scrollDrag"); //Initialize drag scroll behavior for the category tab
            await JS.InvokeVoidAsync("initModalBehavior"); // Initialize modal behavior
        }
    }


    private List<MenuItemResponseDTO> FilteredMenuItems()
    {
        if (selectedCategory == "All")
        {
            return MenuItems.Where(item => item.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            return MenuItems.Where(item => item.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) &&
                                           item.Category == selectedCategory).ToList();
        }
    }

    private void SelectCategory(string category)
    {
        selectedCategory = category;
    }

    private void AddToCart(MenuItemResponseDTO item)
    {
        cartService.AddItem(item);
        Orders = cartService.GetCurrentOrders(); // Update orders after adding an item to the cart
    }

    private async Task PlaceOrder()
    {
        try
        {
            var orderSummaryID = await orderService.GetOrderSummaryIdFromLocalStorage();
            var userInfo = await userService.GetUserInfoAsync();
            var tableInfo = await tableService.GetTableInfoAsync();
            var orderCreateDto = new CreateOrderRequestDTO
            {
                    TableId = tableInfo.Data.Id,
                    TableNumber = TableNumber,
                    UserId = userInfo.Data.Id,
                    UserFullName = userInfo.Data.FullName,
                    OrderItems = cartService.GetCurrentOrders(),
                    OrderSummaryId = orderSummaryID
            };

            var response = await orderService.PlaceOrderAsync(orderCreateDto);

            if(response.Success)
            {
                // Update the OrderSummaryId if needed
                if (orderSummaryID == null)
                {
                    orderSummaryID = response.Data.OrderSummaryId;
                    await orderService.StoreOrderSummaryIdInLocalStorage(orderSummaryID);
                }

                var currentCartItems = cartService.GetCurrentOrders();
                if (currentCartItems != null && currentCartItems.Count > 0)
                {
                    Orders.AddRange(currentCartItems);
                    // Store updated orders in local storage
                    //await orderService.StoreOrdersInLocalStorage(Orders);
                }
                cartService.ClearCart();

                await FetchOrderSummary();

                if(OnPlaceOrder.HasDelegate)
                 {
                    await OnPlaceOrder.InvokeAsync(orderCreateDto); // Invoke the callback with the order details
                }
                StateHasChanged();
            }

            
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while placing the order.";
        }
    }

    private void OpenCart()
    {
        isCartVisible = true;
    }

    private void CloseCart()
    {
        isCartVisible = false;
    }

    private void NavigateToPayments()
    {
        // Navigate to the payments tab
    }
}
