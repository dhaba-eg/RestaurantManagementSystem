@inject IOrderService orderService
@inject ICartService cartService
@inject ITableService tableService
@inject IJSRuntime JS
@inject IOrderService orderService
@inject IUserService userService
@inject NavigationManager Navigation
@inject ITokenService tokenService

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@using WebApp.DTOs.Menu
@using WebApp.DTOs.Order
@using WebApp.DTOs

<div class="payment-page">
    <div class="payment-content">
            <div class="greeting">
                <h1>Hello, @UserName</h1>
                <p>You're in table <span class="table-number">@TableNumber</span></p>
            </div>

            <div class="order-summary">
                <h3>Order Summary</h3>
                <div class="order-items">
                    @foreach (var order in Orders)
                    {
                        <div class="order-item">
                            <div class="order-details">
                                <h4>@order.MenuItemName</h4>
                                <p>Quantity : @order.Quantity</p>
                                <p>Total: $@order.TotalPrice</p>
                            </div>
                        </div>
                    }
                </div>
            </div>

        <div class="payment-summary">
            <div class="payment-summary-content">
                <p><strong>Sub total :</strong> $@SubTotal</p>
                <p><strong>Tax :</strong> $@Tax</p>

                <div class="payment-mode">
                    <label><strong>Choose payment mode :</strong></label>
                    <select @bind="selectedPaymentMode">
                        <option value="Cash">Cash</option>
                        <option value="Credit Card">Credit Card</option>
                        <option value="Online Payment">Online Payment</option>
                    </select>
                </div>
            </div>

            <!-- Total Summary -->
            <div class="total-summary">
                <div class="total-summary-content">
                    <p>Payment Mode: @selectedPaymentMode</p>
                    <h3>Total Amount: $@Total</h3>
                </div>
                <!-- Render PayPal button container for PayPal payments -->
                <div id="paypal-button-container" class="@((selectedPaymentMode == "Online Payment" || selectedPaymentMode == "Credit Card") ? "visible" : "")"></div>
                <!-- Checkout button for non-PayPal payments -->
                <button class="checkout-btn @((selectedPaymentMode == "Cash") ? "" : "hidden")" @onclick="CheckoutCash">Checkout</button>

                
            </div>
        </div>
    </div>

    <div class="payment-image"></div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">@errorMessage</div>
    }
</div>

@code {
    [Parameter] public List<OrderItemResponseDTO> Orders { get; set; } = new List<OrderItemResponseDTO>();
    [Parameter] public string UserName { get; set; }
    [Parameter] public string TableNumber { get; set; }

    private string _selectedPaymentMode = "Cash";
    private decimal SubTotal;
    private decimal Tax;
    private decimal Total;
    private string successMessage = "";
    private string errorMessage = "";

    private Guid? OrderSummaryId { get; set; } 
    private Guid UserId { get; set; }
    private HubConnection? hubConnection;

    private string selectedPaymentMode
    {
        get => _selectedPaymentMode;
        set
        {
            _selectedPaymentMode = value;
            if (_selectedPaymentMode == "Online Payment" || _selectedPaymentMode == "Credit Card" && OrderSummaryId.HasValue)
            {
                try
                {
                    InvokeAsync(() => JS.InvokeVoidAsync("renderPayPalButton", Total, UserId, OrderSummaryId));

                }
                catch (Exception ex)
                {
                    errorMessage = "An error occurred during checkout.";
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Orders = cartService.GetCurrentOrders();
        SubTotal = cartService.GetTotalPrice();
        Tax = SubTotal * 0.1m;
        Total = SubTotal + Tax;

        UserId = await userService.GetUserIdFromLocalStorage();
        OrderSummaryId = await orderService.GetOrderSummaryIdFromLocalStorage();

        if (OrderSummaryId != null) // Ensure it's a valid ID
        {
            await FetchOrderSummary();


            try
            {
                // Initialize SignalR connection for payment status updates
                hubConnection = new HubConnectionBuilder()
                    .WithUrl(Navigation.ToAbsoluteUri("http://localhost:5004/paymentHub"), options =>
                    {
                        options.AccessTokenProvider = async () =>
                        {
                            // Retrieve the JWT token from local storage or a service
                            var token = await tokenService.GetAccessToken();
                            return token;
                        };
                    })
                    .Build();

                await hubConnection.StartAsync();

                // Invoke the RegisterUser method to register the user for payment updates
                await hubConnection.InvokeAsync("RegisterUser", UserId, OrderSummaryId);

                // Listen for the ReceivePaymentStatus event from the SignalR hub
                hubConnection.On<Guid, int>("ReceivePaymentStatus", (orderSummaryId, status) =>
                {
                    if (OrderSummaryId == orderSummaryId)
                    {
                        if (status == 1) // success
                        {
                            successMessage = "Payment was successful!";
                            orderService.ReleaseAfterOrderCompletion();
                            Navigation.NavigateTo("/select-table");
                        }
                        else
                        {
                            errorMessage = "Payment failed. Please try again.";
                        }

                        StateHasChanged();
                    }
                });
            }
            catch (Exception ex)
            {
                // Handle the exception and provide feedback to the user
                errorMessage = $"An error occurred while setting up the web socket connection";
                
                StateHasChanged();
            }


        }

        // await JS.InvokeVoidAsync("renderPayPalButton", Total);

        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && OrderSummaryId.HasValue)
        {
            await JS.InvokeVoidAsync("renderPayPalButton", Total, UserId, OrderSummaryId);
        }
    }

    private async Task FetchOrderSummary()
    {
        try
        {

            var orderSummary = await orderService.GetOrderSummaryByIdAsync(OrderSummaryId);

            if (orderSummary.Success && orderSummary.Data!=null && orderSummary.Data.OrderItems.Count!=0)
            {
                Orders = orderSummary.Data.OrderItems;
            }
            SubTotal = orderSummary.Data.SubTotalAmount;
            Tax = orderSummary.Data.TaxAmount;
            Total = orderSummary.Data.TotalAmount;
        }
        catch (Exception ex)
        {
            errorMessage = $"Your order is Empty";
        }
    }

    private async Task CheckoutCash()
    {
        try
        {
            
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during checkout.";
        }
    }

    public void Dispose()
    {
        _ = hubConnection?.DisposeAsync();
    }
}

